var documenterSearchIndex = {"docs":
[{"location":"guide/#Nonlinear-Expressions","page":"Getting Started","title":"Nonlinear Expressions","text":"","category":"section"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"MadDiff.jl provides a flexible user-interface for writing nonlinear expressions and evaluating the expressions and functions. For example,","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"using MadDiff\n\nx = Variable()\np = Parameter()\nexpr = x[1]^2 + exp(x[2]^p[1])/2 + log(x[3]+p[2])\nprintln(expr) # x[1]^2 + exp(x[2]^p[1])/2 + log(x[3] + p[2])\n\nx0 = [0.,0.5,1.5]\np0 = [2,0.5]\n\nf = function_evaluator(expr)\nprintln(\"f(x0,p0) = $(f(x0,p0))\") # f(x0,p0) = 1.3351598889038159\n\ny0 = zeros(3)\ng = gradient_evaluator(expr)\ng(y0,x0,p0)\nprintln(\"g(x0,p0) = $y0\") # g(x0,p0) = [0.0, 0.6420127083438707, 0.5]","category":"page"},{"location":"guide/#Nonlinear-Programming","page":"Getting Started","title":"Nonlinear Programming","text":"","category":"section"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"MadDiff.jl provides a simple user-interface for creating nonlinear prgogramming models and allows solving the created models using the solvers with NLPModels.jl interface (such as NLPModelsIpopt.jl and MadNLP.jl). The syntax is as follows:","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"using MadDiff, NLPModelsIpopt\n\nm = MadDiffModel(; print_level=3) \n\nx = [variable(m; start=mod(i,2)==1 ? -1.2 : 1.) for i=1:1000]\nobjective(m, sum(100(x[i-1]^2-x[i])^2+(x[i-1]-1)^2 for i=2:1000))\nfor i=1:998\n    constraint(m, 3x[i+1]^3+2*x[i+2]-5+sin(x[i+1]-x[i+2])sin(x[i+1]+x[i+2])+4x[i+1]-x[i]exp(x[i]-x[i+1])-3 == 0)\nend\n\ninstantiate!(m) # this makes the model ready to be solved\nipopt(m)","category":"page"},{"location":"guide/#Use-with-JuMP","page":"Getting Started","title":"Use with JuMP","text":"","category":"section"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"MadDiff.jl can be used as an automatic differentiation backend. The syntax is as follows:","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"using MadDiff, JuMP, Ipopt\n\nm = JuMP.Model(Ipopt.Optimizer) \n\n@variable(m, x[i=1:1000], start=mod(i,2)==1 ? -1.2 : 1.)\n@NLobjective(m, Min, sum(100(x[i-1]^2-x[i])^2+(x[i-1]-1)^2 for i=2:1000))\n@NLconstraint(m, [i=1:998], 3x[i+1]^3+2*x[i+2]-5+sin(x[i+1]-x[i+2])sin(x[i+1]+x[i+2])+4x[i+1]-x[i]exp(x[i]-x[i+1])-3 == 0)\n\noptimize!(m; differentiation_backend = MadDiffAD())","category":"page"},{"location":"api/#API-Manual","page":"API Reference","title":"API Manual","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [MadDiffCore, MadDiffModels, MadDiffMOI, MadDiff]","category":"page"},{"location":"api/#MadDiffModels.MadDiffModels","page":"API Reference","title":"MadDiffModels.MadDiffModels","text":"MadDiffModels\n\nMadDiffModels is a submodule of MadDiff. MadDiffModels allows modeling nonlinear optimization problem of the following form:\n\nminimize:   f(x)\nsubject to: xl ≤   x  ≤ xu\n            gl ≤ g(x) ≤ gu,\n\nwhere:\n\nx ∈ R^n is the decision variable.\nf : R^n -> R   is the objective function\ng : R^n -> R^m is the constraint mapping.\n\nThe model is constructed as an NLPModel (see https://github.com/JuliaSmoothOptimizers/NLPModels.jl), and can be solved with various NLP solvers such as:\n\nMadNLP (https://github.com/MadNLP/MadNLP.jl)\nIpopt (https://github.com/JuliaSmoothOptimizers/NLPModelsIpopt.jl)\nKnitro (https://github.com/JuliaSmoothOptimizers/NLPModelsKnitro.jl)\n\n\n\n\n\n","category":"module"},{"location":"api/#MadDiffModels.Constraint","page":"API Reference","title":"MadDiffModels.Constraint","text":"Constraint\n\nA constraint index of MadDiffModel.\n\n\n\n\n\n","category":"type"},{"location":"api/#MadDiffModels.MadDiffModel","page":"API Reference","title":"MadDiffModels.MadDiffModel","text":"MadDiffModel{T <: Real}\n\nA mathematical model of a nonlinaer program.\n\n\n\n\n\n","category":"type"},{"location":"api/#MadDiffModels.MadDiffModel-Tuple{}","page":"API Reference","title":"MadDiffModels.MadDiffModel","text":"MadDiffModel()\n\nCreates an empty MadDiffModel{Float64}.\n\nExample m = MadDiffModel(linear_solver = \"ma27\")\n\n\n\n\n\n","category":"method"},{"location":"api/#MadDiffModels.MadDiffModel-Union{Tuple{}, Tuple{T}} where T","page":"API Reference","title":"MadDiffModels.MadDiffModel","text":"MadDiffModel{T}()\n\nCreates an empty MadDiffModel{T}.\n\nExample m = MadDiffModel{Float32}()\n\n\n\n\n\n","category":"method"},{"location":"api/#MadDiffModels.ModelComponent","page":"API Reference","title":"MadDiffModels.ModelComponent","text":"ModelComponent\n\nA model component (eitehr a variable or a parameter) of MadDiffModel.\n\n\n\n\n\n","category":"type"},{"location":"api/#MadDiffModels.constraint-Tuple{MadDiffModels.MadDiffModel, Expression}","page":"API Reference","title":"MadDiffModels.constraint","text":"constraint(m::MadDiffModel, e::MadDiffCore.Expression; lb=0., ub=0.)\n\nAdds a constraint to MadDiffModel. Example ``` m = MadDiffModel()\n\nx = [variable(m) for i=1:3] constraint(m, x[1]^2 + 2*sin(x[2]) - exp(x[3]) >= 0) constraint(m, x[1]^4+ x[2]^4 x[3]^4; lb = 0.1, ub = 1.)\n\n\n\n\n\n","category":"method"},{"location":"api/#MadDiffModels.dual-Tuple{MadDiffModels.Constraint}","page":"API Reference","title":"MadDiffModels.dual","text":"dual(c::Constraint)\n\nRetrun the dual of constraint c.\n\n\n\n\n\n","category":"method"},{"location":"api/#MadDiffModels.instantiate!-Tuple{MadDiffModels.MadDiffModel}","page":"API Reference","title":"MadDiffModels.instantiate!","text":"instantiate!(m::MadDiffModel; sparse = true)\n\nInstantiates the model m. The model must be instantiated before solving.\n\nExample\n\nusing MadDiff, NLPModelsIpopt\n\nm = MadDiffModel() \n\nx = [variable(m) for i=1:3]\nobjective(m, x[1]^2 + x[2]^2 + sin(x[3]))\nconstraint(m, 3x[2]^2 <= 1.)\n\ninstantiate!(m)\nipopt(m)\n\n\n\n\n\n","category":"method"},{"location":"api/#MadDiffModels.lower_bound-Tuple{MadDiffModels.Constraint}","page":"API Reference","title":"MadDiffModels.lower_bound","text":"lower_bound(c::Constraint)\n\nRetrun the lower bound of constraint c.\n\n\n\n\n\n","category":"method"},{"location":"api/#MadDiffModels.lower_bound-Union{Tuple{MadDiffModels.ModelComponent{V}}, Tuple{V}} where V<:Variable","page":"API Reference","title":"MadDiffModels.lower_bound","text":"lower_bound(x::ModelComponent{V}) where V <: MadDiffCore.Variable\n\nRetrun the lower bound of variable x.\n\n\n\n\n\n","category":"method"},{"location":"api/#MadDiffModels.objective-Tuple{MadDiffModels.MadDiffModel, Expression}","page":"API Reference","title":"MadDiffModels.objective","text":"objective(m::MadDiffModel, e::MadDiffCore.Expression\n\nSets the objective function for MadDiffModel. Only minimization is supported. Example\n\nm = MadDiffModel()\n\nx = [variable(m) for i=1:3]\nobjective(m, x[1]^2 + x[2] + sin(x[3]))\n\n\n\n\n\n","category":"method"},{"location":"api/#MadDiffModels.parameter-Union{Tuple{T}, Tuple{MadDiffModels.MadDiffModel{T}, Any}} where T","page":"API Reference","title":"MadDiffModels.parameter","text":"parameter(m::MadDiffModel{T}, val)\n\nCreates a parameter for MadDiffModel with value val. Example\n\nm = MadDiffModel()\n\np = parameter(m, 0.5)\n\n\n\n\n\n","category":"method"},{"location":"api/#MadDiffModels.set_lower_bound-Tuple{MadDiffModels.Constraint, Any}","page":"API Reference","title":"MadDiffModels.set_lower_bound","text":"set_lower_bound(c::Constraint,val)\n\nSet the lower bound of constraint c to val.\n\n\n\n\n\n","category":"method"},{"location":"api/#MadDiffModels.set_lower_bound-Union{Tuple{V}, Tuple{MadDiffModels.ModelComponent{V}, Any}} where V<:Variable","page":"API Reference","title":"MadDiffModels.set_lower_bound","text":"set_lower_bound(x::ModelComponent{V},val) where V <: MadDiffCore.Variable\n\nSet the lower bound of variable 'x' to val.\n\n\n\n\n\n","category":"method"},{"location":"api/#MadDiffModels.set_upper_bound-Tuple{MadDiffModels.Constraint, Any}","page":"API Reference","title":"MadDiffModels.set_upper_bound","text":"set_upper_bound(c::Constraint,val)\n\nSet the upper bound of constraint c to val.\n\n\n\n\n\n","category":"method"},{"location":"api/#MadDiffModels.set_upper_bound-Union{Tuple{V}, Tuple{MadDiffModels.ModelComponent{V}, Any}} where V<:Variable","page":"API Reference","title":"MadDiffModels.set_upper_bound","text":"set_upper_bound(x::ModelComponent{V},val) where V <: MadDiffCore.Variable\n\nSet the upper bound of variable 'x' to val.\n\n\n\n\n\n","category":"method"},{"location":"api/#MadDiffModels.setvalue-Union{Tuple{P}, Tuple{MadDiffModels.ModelComponent{P}, Any}} where P<:Parameter","page":"API Reference","title":"MadDiffModels.setvalue","text":"setvalue(p::ModelComponent{P},val) where P <: MadDiffCore.Parameter\n\nSet the value of parameter 'p' to val.\n\n\n\n\n\n","category":"method"},{"location":"api/#MadDiffModels.setvalue-Union{Tuple{V}, Tuple{MadDiffModels.ModelComponent{V}, Any}} where V<:Variable","page":"API Reference","title":"MadDiffModels.setvalue","text":"setvalue(x::ModelComponent{V},val) where V <: MadDiffCore.Variable\n\nSet the value of variable 'x' to val.\n\n\n\n\n\n","category":"method"},{"location":"api/#MadDiffModels.upper_bound-Tuple{MadDiffModels.Constraint}","page":"API Reference","title":"MadDiffModels.upper_bound","text":"upper_bound(c::Constraint)\n\nRetrun the upper bound of constraint c.\n\n\n\n\n\n","category":"method"},{"location":"api/#MadDiffModels.upper_bound-Union{Tuple{MadDiffModels.ModelComponent{V}}, Tuple{V}} where V<:Variable","page":"API Reference","title":"MadDiffModels.upper_bound","text":"upper_bound(x::ModelComponent{V}) where V <: MadDiffCore.Variable\n\nRetrun the upper bound of variable x.\n\n\n\n\n\n","category":"method"},{"location":"api/#MadDiffModels.value-Union{Tuple{MadDiffModels.ModelComponent{P}}, Tuple{P}} where P<:Parameter","page":"API Reference","title":"MadDiffModels.value","text":"value(p::ModelComponent{P}) where P <: MadDiffCore.Parameter\n\nReturn the value of parameter p.\n\n\n\n\n\n","category":"method"},{"location":"api/#MadDiffModels.value-Union{Tuple{MadDiffModels.ModelComponent{V}}, Tuple{V}} where V<:Variable","page":"API Reference","title":"MadDiffModels.value","text":"value(x::ModelComponent{V}) where V <: MadDiffCore.Variable\n\nReturn the value of variable x.\n\n\n\n\n\n","category":"method"},{"location":"api/#MadDiffModels.variable-Union{Tuple{MadDiffModels.MadDiffModel{T}}, Tuple{T}} where T","page":"API Reference","title":"MadDiffModels.variable","text":"variable(m::MadDiffModel{T}; lb=-Inf, ub=Inf, start=0.)\n\nCreates a variable for MadDiffModel.\n\nExample\n\nm = MadDiffModel()\n\nx = variable(m; lb = -1, ub = 1, start = 0.5)\n\n\n\n\n\n","category":"method"},{"location":"api/#MadDiffMOI.MadDiffMOI","page":"API Reference","title":"MadDiffMOI.MadDiffMOI","text":"MadDiffMOI\n\nMadDiffMOI is a submodule of MadDiff. MadDifMOI allows solving nonlinear optimization problems specified by MathOptInterface (https://github.com/jump-dev/JuMP.jl/tree/od/moi-nonlinear).\n\n\n\n\n\n","category":"module"},{"location":"api/#MadDiffCore.Expression-Tuple{MathOptInterface.Nonlinear.Expression}","page":"API Reference","title":"MadDiffCore.Expression","text":"Expression(ex::MOI.Nonlinear.Expression; subex = nothing)\n\nCreate a MadDiff.Expression from MOI.Expression.\n\n\n\n\n\n","category":"method"},{"location":"api/#MadDiffMOI.MadDiffAD","page":"API Reference","title":"MadDiffMOI.MadDiffAD","text":"MadDiffAD() <: MOI.Nonlinear.AbstractAutomaticDifferentiation\n\nA differentiation backend for MathOptInterface based on MadDiff\n\n\n\n\n\n","category":"type"},{"location":"api/#MadDiffMOI.MadDiffEvaluator","page":"API Reference","title":"MadDiffMOI.MadDiffEvaluator","text":"MadDiffEvaluator <: MOI.AbstractNLPEvaluator\n\nA type for callbacks for MathOptInterface's nonlinear model.\n\n\n\n\n\n","category":"type"},{"location":"api/#MathOptInterface.Nonlinear.Evaluator-Tuple{MathOptInterface.Nonlinear.Model, MadDiffMOI.MadDiffAD, Vector{MathOptInterface.VariableIndex}}","page":"API Reference","title":"MathOptInterface.Nonlinear.Evaluator","text":"MOI.Nonlinear.Evaluator(model::MOI.Nonlinear.Model, ::MadDiffAD, ::Vector{MOI.VariableIndex})\n\nCreate a MOI.Nonlinear.Evaluator from MOI.Nonlinear.Model using MadDiff's AD capability.\n\n\n\n\n\n","category":"method"},{"location":"#MadDiff.jl","page":"Home","title":"MadDiff.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This documentation page is under construction.","category":"page"},{"location":"","page":"Home","title":"Home","text":"MadDiff.jl is a simple algebraic modeling/differentiation package. MadDiff.jl constructs first and second derivative functions off-line (i.e., prior to calling the optimization solver) by applying operator overloading-based automatic differentiation on functions. The exact derivative functions can be obtained as results. ","category":"page"},{"location":"#Bug-reports-and-support","page":"Home","title":"Bug reports and support","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Please report issues and feature requests via the Github issue tracker. ","category":"page"}]
}
