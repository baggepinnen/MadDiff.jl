        - abstract type Expression end
        - 
        - struct Source
       18     str::String
        - end
        - 
        - struct Variable <: Expression
       26     func::Function
        -     n::Int
        - end
        - 
        - mutable struct Term <: Expression
       21     func::Function
        -     deriv::Dict{Int,Function}
        - end
        - 
       18 Source() = Source("")
      241 Variable(n;name=nothing) = Variable(name ==nothing ? x->x[n] : x->x isa PrintSource ? PrintVariable(name) : x[n],n)
        - Term() = Term(con_zero,Dict{Int,Function}())
       21 Term!(e::Variable,f,d) = Term(f,d)
        - Term!(e::Term,f,d) = begin
        9     e.func = f
        9     e.deriv = d
        9     return e
        - end
        - 
        - string(e::Variable) = string(func(e)(PrintSource()))
        - print(io::IO,e::Variable) = print(io, string(e))
        - 
        - string(e::Term) = raw(func(e)(PrintSource()))
        - print(io::IO,e::Term) = print(io, string(e))
        - 
        - string(e::Source) = e.str
        - print(io::IO,e::Source) = print(io, string(e))
        - 
        - show(io::IO,::MIME"text/plain",e::Expression) = print(io,e)
        - show(io::IO,::MIME"text/plain",e::Source) = print(io,e)
        - 
       85 func(e::Expression) = e.func
       30 deriv(e::Term) = e.deriv
       26 deriv(e::Variable) = Dict{Int,Function}(e.n=>con_one)
        - deriv(e::Real) = Dict{Int,Function}()
        - 
        - con(a) = x->a
       27 con_one(x) = 1.
        - con_zero(x) = 0.
        -     
       26 getindex(e::Source,n) = Variable(n;name = e.str == "" ? nothing : e.str*"[$n]")
        - 
       16 fsub(f::Function) = x->-f(x)
       23 fadd(f1::Function,f2::Function) = x->f1(x)+f2(x)
       76 fmul(f1::Function,f2::Function) = x->f1(x)*f2(x)
       12 fmul(f1::Function,f2::typeof(con_one)) = f1
        5 fmul(f1::typeof(con_one),f2::Function) = f2
       20 fsub(f1::Function,f2::Function) = x->f1(x)-f2(x)
        - fpow(f1::Function,f2::Function) = x->f1(x)^f2(x)
      139 fcom(f1::Function,f2::Function) = x->f1(f2(x))
        - fcom(f1::Function,f2::Function,f3::Function) = x->f1(f2(x),f3(x))
        - 
        - for T in [typeof(con_one),typeof(con_zero),typeof(con(0)),typeof(con(0.))]
        -     @eval begin
        -         fcom(f1::$T,f2::Function) = f1
        -         fcom(f1::$T,f2::Function,f3::Function) = f1
        -     end
        - end
        - 
        - for T in Reals
        -     @eval begin 
       31         fadd(f1::Function,f2::$T) = f2 == 0 ? f1 : x->f1(x)+f2
        -         fadd(f1::$T,f2::Function) = f1 == 0 ? f2 : x->f1+f2(x)
        4         fsub(f1::Function,f2::$T) = f2 == 0 ? f1 : x->f1(x)-f2
        -         fsub(f1::$T,f2::Function) = f1 == 0 ? -f2 : x->f1-f2(x)
       10         fmul(f1::Function,f2::$T) = f2 == 1 ? f1 : f2 == 0 ? con_zero : x->f1(x)*f2
       39         fmul(f1::$T,f2::Function) = f1 == 1 ? f2 : f1 == 0 ? con_zero : x->f1*f2(x)
       79         fpow(f1::Function,f2::$T) = f2 == 1 ? f1 : f2 == 0 ? con_one  : x->f1(x)^f2
       16         fpow(f1::$T,f2::Function) = f1 == 1 ? f1 : f1 == 0 ? con_zero : x->f1^f2(x)
        -         fcom(f1::Function,f2::Function,a::$T) = x->f1(f2(x),a)
        -         fcom(f1::Function,a::$T,f3::Function) = x->f1(a,f3(x))
        -     end
        - end
        - fsum(fs) = x->sum(f(x) for f in fs)
        - 
        - function f_add_sum(f1,f2)
        -     if hasfield(typeof(f1),:fs)
        -         i = findfirst(f->f2 isa eltype(f.fs),f1.fs)
        -         if i==nothing            
        -             push!(f1.fs,fsum([f2]))
        -         else
        -             push!(f1.fs[i].fs,f2)
        -         end
        -         return f1
        -     else
        -         if typeof(f1)==typeof(f2)
        -             return fsum([fsum([f1,f2])])
        -         else
        -             return fsum([
        -                 fsum([f1]),
        -                 fsum([f2])
        -             ])
        -         end
        -     end
        - end
        - 
       18 function deriv!(deriv,f)
       36     for (i,d) in deriv
       26         deriv[i] = f(d)
        -     end
       18     return deriv
        - end
        6 function derivadd!(deriv1,deriv2)
       12     for (i,d) in deriv2
        6         deriv1[i] = haskey(deriv1,i) ? fadd(deriv1[i],d) : d
        -     end
        6     return deriv1
        - end
        2 function derivsub!(deriv1,deriv2)
        4     for (i,d) in deriv2
        2         deriv1[i] = haskey(deriv1,i) ? fsub(deriv1[i],d) : fsub(d)
        -     end
        2     return deriv1
        - end
       10 function derivmul!(deriv,f)
       20     for (i,d) in deriv
       10         deriv[i] = fmul(d,f)
        -     end
       10     return deriv
        - end
        4 derivmul!(deriv1,deriv2,f1,f2) = derivadd!(derivmul!(deriv1,f2),derivmul!(deriv2,f1))
        - 
        - +(e::Expression) = e
        1 -(e::Expression) = Term!(e,fsub(func(e)),deriv!(deriv(e),fsub))
        2 +(e1::Expression,e2::Expression) = Term!(e1,fadd(func(e1),func(e2)),derivadd!(deriv(e1),deriv(e2)))
        2 -(e1::Expression,e2::Expression) = Term!(e1,fsub(func(e1),func(e2)),derivsub!(deriv(e1),deriv(e2)))
        4 *(e1::Expression,e2::Expression) = Term!(e1,fmul(func(e1),func(e2)),derivmul!(deriv(e1),deriv(e2),func(e1),func(e2)))
        - 
        - for T in Reals
        -     @eval begin
        4         +(e::Expression,a::$T) = Term!(e,fadd(func(e),a),deriv(e))
        -         +(a::$T,e::Expression) = Term!(e,fadd(a,func(e)),deriv(e))
        -         -(e::Expression,a::$T) = Term!(e,fsub(func(e),a),deriv(e))
        -         -(a::$T,e::Expression) = Term!(e,fsub(a,func(e)),deriv!(e,d->fsub(d)))
        -         *(e::Expression,a::$T) = Term!(e,fmul(func(e),a),derivmul!(deriv(e),a))
        3         *(a::$T,e::Expression) = Term!(e,fmul(a,func(e)),derivmul!(deriv(e),a))
       11         ^(e::Expression,a::$T) = Term!(e,fpow(func(e),a),deriv!(deriv(e),d->fmul(a,fmul(fpow(func(e),a-1),d))))
        2         ^(a::$T,e::Expression) = Term!(e,fpow(a,func(e)),deriv!(deriv(e),d->fmul(fmul(fpow(a,fsub(func(e),1)),d),log(a))))
        -     end
        - end
        - for (T1,T2) in [(Expression,Expression),[(Expression,T) for T in Reals]...,[(T,Expression) for T in Reals]...]
        -     @eval begin
        -         -(e1::$T1,e2::$T2) = e1+(-e2)
        4         /(e1::$T1,e2::$T2) = e1*inv(e2)
        -     end
        - end
        - 
        - add_sum(e1::Expression,e2::Expression) = Term!(e1,f_add_sum(func(e1),func(e2)),derivadd!(deriv(e1),deriv(e2)))
        - 
        - 
        - for (M,f,nargs) in diffrules
        -     if nargs == 1
       42         df = :(x->$(diffrule(M,f,:x)))
        -         @eval begin
       11             $f(e::Expression)=Term!(
        -                 e,
        -                 fcom($f,func(e)),
       14                 deriv!(deriv(e),d->fmul(fcom($df,func(e)),d))
        -             )
        -         end
        -     elseif nargs == 2
        -         dfsym,~ = diffrule(M,f,:x,:a)
        -         df = :((x,a)->$dfsym)
        -         for T in Reals
        -             @eval begin
        -                 $f(e::Expression,a::$T) = Term!(
        -                     e,
        -                     fcom($f,func(e),a),
        -                     deriv!(deriv(e),d->fmul(fcom($df,func(e),a),d))
        -                 )
        -             end
        -         end
        - 
        -         ~,dfsym = diffrule(M,f,:a,:x)
        -         df = :((a,x)->$dfsym)
        - 
        -         for T in Reals
        -             @eval begin
        -                 $f(a::$T,e::Expression) = Term!(
        -                     e,
        -                     fcom($f,a,func(e)),
        -                     deriv!(deriv(e),d->fmul(fcom($df,a,func(e)),d))
        -                 )
        -             end
        -         end
        - 
        -         dfsym1,dfsym2 = diffrule(M,f,:x1,:x2)
        -         df1 = :((x1,x2)->$dfsym1)
        -         df2 = :((x1,x2)->$dfsym2)
        - 
        -         @eval begin
        -             $f(e1::Expression,e2::Expression) = Term!(
        -                 e1,
        -                 fcom($f,func(e1),func(e2)),
        -                 derivadd!(
        -                     deriv!(deriv(e1),d->fmul(fcom($df1,func(e1),func(e2)),d)),
        -                     deriv!(deriv(e2),d->fmul(fcom($df2,func(e1),func(e2)),d))
        -                 )
        -             )
        -         end
        -     end
        - end
        - 
